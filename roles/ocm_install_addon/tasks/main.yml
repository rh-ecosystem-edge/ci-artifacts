---
- name: Fail if ocm_addon_id is undefined
  fail: msg="Bailing out. This play requires 'ocm_addon_id'"
  when: ocm_addon_id is undefined

- name: ocm addon id
  debug:
    msg: "ocm addon id to install: {{ ocm_addon_id  }}"

- name: Check if addon is already installed
  shell: 
    cmd: "ocm get /api/clusters_mgmt/v1/clusters/{{ ocm_cluster_id }}/addons/{{ ocm_addon_id  }} 2>&1 | jq -r '.kind'"
  register: ocm_addon_precheck
  failed_when: false
  changed_when: false

- name: Set addon current state
  set_fact:
    wait_until_ready: "{{ wait_for_ready_state == 'True' }}"
    addon_install_needed: "{{ ocm_addon_precheck.stdout == 'Error' }}"
  changed_when: false

- name: Install needed
  debug: 
    msg: "Install needed: {{ addon_install_needed  }}"

- name: Create ocm addon install payload
  template:
    src: "{{ ocm_deploy_addon_template }}"
    dest: "{{ artifact_extra_logs_dir }}/addon_{{ ocm_addon_id }}.json"
    mode: 0400
  changed_when: false
  when: addon_install_needed

- name: Replace single quote with double in install payload
  when: addon_install_needed
  replace:
    path: "{{ artifact_extra_logs_dir }}/addon_{{ ocm_addon_id }}.json"
    regexp: "'"
    replace: '"'

- name: "Install addon {{ ocm_addon_id  }} via ocm"
  shell: |
    set -o pipefail;
    url="/api/clusters_mgmt/v1/clusters/{{ ocm_cluster_id }}/addons"
    body="{{ artifact_extra_logs_dir }}/addon_{{ ocm_addon_id  }}.json"
    output=$(ocm post "$url" --body=$body 2>&1);
    echo "$output" >&2; # for observation
    echo "$output" | jq -r '.kind'
  register: addon_install_command
  failed_when: false
  when: addon_install_needed

- name: Fail if response kind is not AddOnInstallation
  fail: 
    msg: "response kind: {{ addon_install_command.stdout }}"
  when: 
    - addon_install_command is defined
    - addon_install_command.stdout is defined
    - addon_install_command.stdout != 'AddOnInstallation'

- name: Debug wait_until_ready
  debug: msg="Wait for ready state={{ wait_until_ready }}"

- name: Poll addon state until reached desired state
  shell: |
    set -o pipefail;
    url="/api/clusters_mgmt/v1/clusters/{{ ocm_cluster_id }}/addons/{{ ocm_addon_id }}";
    output=$(ocm get "$url" 2>&1)
    echo "$output" >&2; # for observation
    echo "$output" | jq -r '.state'
  register: addon_state_result
  changed_when: false
  retries: 60
  delay: 60
  until: |
    ('deleting' in addon_state_result.stdout) or
    ('failed' in addon_state_result.stdout) or
    ('installing' in addon_state_result.stdout and not wait_until_ready) or
    ('ready' in addon_state_result.stdout) 
  failed_when: |
    ('deleting' in addon_state_result.stdout) or
    ('failed' in addon_state_result.stdout) or
    ('ready' not in addon_state_result.stdout and wait_until_ready)
