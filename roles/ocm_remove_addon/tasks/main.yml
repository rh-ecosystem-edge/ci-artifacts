---
- name: Fail if ocm_addon_id is undefined
  fail: msg="Bailing out. This play requires 'ocm_addon_id'"
  when: ocm_addon_id is undefined

- name: ocm addon id
  debug:
    msg: "ocm addon id to install: {{ ocm_addon_id  }}"

- name: Check if addon is already installed
  shell:
    cmd: "ocm get /api/clusters_mgmt/v1/clusters/{{ ocm_cluster_id }}/addons/{{ ocm_addon_id  }} 2>&1 | jq -r '.kind'"
  register: ocm_addon_precheck
  failed_when: false
  changed_when: false

- name: Set addon current state
  set_fact:
    wait_for_removal: "{{ wait_until_removed | bool }}"
    addon_installed: "{{ ocm_addon_precheck.stdout != 'Error' }}"
  changed_when: false

- name: Is addon installed
  debug:
    msg: "Addon installed in cluster: {{ addon_installed }}"

- name: "Remove addon {{ ocm_addon_id  }} via ocm"
  shell:
    cmd: "ocm delete /api/clusters_mgmt/v1/clusters/{{ ocm_cluster_id  }}/addons/{{ ocm_addon_id  }} 2>&1 | jq -r '.kind'"
  register: addon_remove_command
  failed_when: false
  when: addon_installed

- name: Fail if response kind is Error
  fail:
    msg: "response kind: {{ addon_remove_command.stdout }}"
  when:
    - addon_remove_command is defined
    - addon_remove_command.stdout is defined
    - addon_remove_command.stdout == 'Error'

- name: Debug wait_until_removed
  debug: msg="Wait for ready state={{ wait_for_removal }}"

- name: Poll addon state until reached desired state
  shell:
    cmd: "ocm get /api/clusters_mgmt/v1/clusters/{{ ocm_cluster_id }}/addons/{{ ocm_addon_id  }} 2>&1 | jq -r '.state'"
  register: addon_state_result
  changed_when: false
  retries: 8
  delay: 600
  until: |
    (addon_state_result.stdout == 'deleting' and not wait_for_removal) or
    (addon_state_result.stdout == '')
  failed_when: |
    (addon_state_result.stdout == 'installing') or
    (addon_state_result.stdout == 'failed')

- name: Polling end debug info
  debug: msg="AddinId={{ ocm_addon_id }}, Wait until removed={{ wait_for_removal }}, Current addon state={{ addon_state_result.stdout }}"
